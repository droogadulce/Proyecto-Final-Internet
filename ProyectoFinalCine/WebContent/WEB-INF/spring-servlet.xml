<?xml  version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<context:annotation-config />
	<context:component-scan base-package="Control" />

	<bean id="jspViewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>

    <bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="classpath:messages" />
		<property name="defaultEncoding" value="UTF-8" />
	</bean>
	
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
		p:location="/WEB-INF/jdbc.properties" />
    
    <!-- Acceso a la base de datos a partir de un archivo properties -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close"
		p:driverClassName="${jdbc.driverClassName}"
		p:url="${jdbc.databaseurl}" 
		p:username="${jdbc.username}" 
		p:password="${jdbc.password}" />	
     
 <!-- Hibernate 3 Annotation SessionFactory Bean definition -->
 <!-- Esta es una forma de programar el objeto sessionFactory. En este caso no se requiere classpath:hibernate.cfg.xml --> 
	<bean id="hibernate3AnnotatedSessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" /> <!-- Referenciado arriba el datasource -->
		<property name="annotatedClasses">
			<list>
 				<value>Pojo.Document</value>  <!-- si hay mas beans, aqui se enlistan -->
 				<value>Pojo.Pelicula</value>
 				<value>Pojo.Compra</value>
 				<value>Pojo.Usuario</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${jdbc.dialect}</prop>
				<prop key="hibernate.current_session_context_class">thread</prop>
				<prop key="hibernate.show_sql">true</prop>
			</props>
		</property>
	</bean>
			
	<bean id="documentDAO" class="dao.DocumentDAOImpl">
		<property name="sessionFactory" ref="hibernate3AnnotatedSessionFactory" />
	</bean>
	<bean id="peliculaDAO" class="dao.PeliculaDAOImpl">
		<property name="sessionFactory" ref="hibernate3AnnotatedSessionFactory" />
	</bean>
	<bean id="compraDAO" class="dao.CompraDAOImpl">
		<property name="sessionFactory" ref="hibernate3AnnotatedSessionFactory" />
	</bean>
	<bean id="usuarioDAO" class="dao.UsuarioDAOImpl">
		<property name="sessionFactory" ref="hibernate3AnnotatedSessionFactory" />
	</bean>

<!-- Esta es otra forma de programar el objeto sessionFactory. En este caso sÃ­ se requiere classpath:hibernate.cfg.xml  -->	
<!--  	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation">
			<value>classpath:hibernate.cfg.xml</value>
		</property>
		<property name="configurationClass">
			<value>org.hibernate.cfg.AnnotationConfiguration</value>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${jdbc.dialect}</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.connection.SetBigStringTryClob">true</prop>
				<prop key="hibernate.jdbc.batch_size">0</prop>
			</props>
		</property>
	</bean> 

 
  	<bean id="documentDAO" class="dao.DocumentDAOImpl">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean> 
-->	

	<!-- multipart para subir archivos -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- one of the properties available; the maximum file size in bytes -->
		<property name="maxUploadSize" value="10000000" /> <!-- Numero maximo de bytes que se pueden subir -->
	</bean>
	
 	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="hibernate3AnnotatedSessionFactory" /> <!-- mandamos el bean sessionFactory que hemos construido anteriormente -->
	</bean>
	
	<!-- crea un bean, es nuestro. no tiene atributos
	bean class es como un new
	requiere que el bean ya este creado
	preparamos todo el escenario
	 -->	
	<bean id="documentService" class="servicio.DocumentServiceImpl"/>
	<bean id="peliculaService" class="servicio.PeliculaServiceImpl" />
	<bean id="compraService" class="servicio.CompraServiceImpl" />
	<bean id="usuarioService" class="servicio.UsuarioServiceImpl" />
	
	<bean id="userValidator" class="validator.UserValidator" />
	
	
</beans>